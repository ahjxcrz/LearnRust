"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typesBundleForPolkadot = exports.typesBundle = exports.typesAlias = exports.rpc = exports.types = void 0;
const utils_1 = require("@open-web3/orml-type-definitions/utils");
const pallets_1 = __importDefault(require("./pallets"));
const astar_1 = __importDefault(require("./specs/astar"));
const shiden_1 = __importDefault(require("./specs/shiden"));
const shibuya_1 = __importDefault(require("./specs/shibuya"));
// FIXME: currently we cannot override this in runtime definitions because the code generation script cannot handle overrides
// This will make it behave correctly in runtime, but wrong types in TS defination.
const additionalOverride = {
    Address: 'AccountId',
    LookupSource: 'AccountId',
    PalletsOrigin: {
        _enum: {
            System: 'SystemOrigin',
            Timestamp: 'Null',
            RandomnessCollectiveFlip: 'Null',
            Balances: 'Null',
            // Vesting: 'Null',
            // Treasury: 'Null',
            Utility: 'Null',
            // Multisig: 'Null',
            // Recovery: 'Null',
            // Proxy: 'Null',
            // Scheduler: 'Null',
            Indices: 'Null',
            Authorship: 'Null',
            Aura: 'Null',
            Grandpa: 'Null',
            Staking: 'Null',
            Session: 'Null',
            Historical: 'Null',
            // Council: 'CollectiveOrigin',
            // Contracts: 'Null',
            // EVM: 'Null',
            Sudo: 'Null',
            TransactionPayment: 'Null'
        }
    }
};
const astarDefs = {
    pallets: pallets_1.default
};
exports.types = {
    ...(0, utils_1.typesFromDefs)(astarDefs),
    ...additionalOverride
};
exports.rpc = (0, utils_1.jsonrpcFromDefs)(astarDefs, {});
exports.typesAlias = (0, utils_1.typesAliasFromDefs)(astarDefs, {});
function getBundle(versioned) {
    return {
        rpc: exports.rpc,
        instances: {
            council: ['generalCouncil']
        },
        types: [...versioned].map((version) => {
            return {
                minmax: version.minmax,
                types: {
                    ...exports.types,
                    ...version.types
                }
            };
        }),
        alias: exports.typesAlias
    };
}
exports.typesBundle = {
    spec: {
        astar: getBundle(astar_1.default),
        shiden: getBundle(shiden_1.default),
        shibuya: getBundle(shibuya_1.default)
    }
};
// Type overrides have priority issues
exports.typesBundleForPolkadot = {
    spec: {
        astar: getBundle(astar_1.default),
        shiden: getBundle(shiden_1.default),
        shibuya: getBundle(shibuya_1.default)
    }
};
