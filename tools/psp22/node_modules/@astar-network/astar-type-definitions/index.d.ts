export declare const types: {
    Address: string;
    LookupSource: string;
    PalletsOrigin: {
        _enum: {
            System: string;
            Timestamp: string;
            RandomnessCollectiveFlip: string;
            Balances: string;
            Utility: string;
            Indices: string;
            Authorship: string;
            Aura: string;
            Grandpa: string;
            Staking: string;
            Session: string;
            Historical: string;
            Sudo: string;
            TransactionPayment: string;
        };
    };
};
export declare const rpc: Record<string, Record<string, any>>;
export declare const typesAlias: Record<string, any>;
export declare const typesBundle: {
    spec: {
        astar: {
            rpc: Record<string, Record<string, any>>;
            instances: {
                council: string[];
            };
            types: {
                minmax: [number | null | undefined, number | null | undefined] | [(number | undefined)?, (number | undefined)?] | (number | null | undefined)[];
                types: {
                    Address: string;
                    LookupSource: string;
                    PalletsOrigin: {
                        _enum: {
                            System: string;
                            Timestamp: string;
                            RandomnessCollectiveFlip: string;
                            Balances: string;
                            Utility: string;
                            Indices: string;
                            Authorship: string;
                            Aura: string;
                            Grandpa: string;
                            Staking: string;
                            Session: string;
                            Historical: string;
                            Sudo: string;
                            TransactionPayment: string;
                        };
                    };
                };
            }[];
            alias: Record<string, any>;
        };
        shiden: {
            rpc: Record<string, Record<string, any>>;
            instances: {
                council: string[];
            };
            types: {
                minmax: [number | null | undefined, number | null | undefined] | [(number | undefined)?, (number | undefined)?] | (number | null | undefined)[];
                types: {
                    Address: string;
                    LookupSource: string;
                    PalletsOrigin: {
                        _enum: {
                            System: string;
                            Timestamp: string;
                            RandomnessCollectiveFlip: string;
                            Balances: string;
                            Utility: string;
                            Indices: string;
                            Authorship: string;
                            Aura: string;
                            Grandpa: string;
                            Staking: string;
                            Session: string;
                            Historical: string;
                            Sudo: string;
                            TransactionPayment: string;
                        };
                    };
                };
            }[];
            alias: Record<string, any>;
        };
        shibuya: {
            rpc: Record<string, Record<string, any>>;
            instances: {
                council: string[];
            };
            types: {
                minmax: [number | null | undefined, number | null | undefined] | [(number | undefined)?, (number | undefined)?] | (number | null | undefined)[];
                types: {
                    Address: string;
                    LookupSource: string;
                    PalletsOrigin: {
                        _enum: {
                            System: string;
                            Timestamp: string;
                            RandomnessCollectiveFlip: string;
                            Balances: string;
                            Utility: string;
                            Indices: string;
                            Authorship: string;
                            Aura: string;
                            Grandpa: string;
                            Staking: string;
                            Session: string;
                            Historical: string;
                            Sudo: string;
                            TransactionPayment: string;
                        };
                    };
                };
            }[];
            alias: Record<string, any>;
        };
    };
};
export declare const typesBundleForPolkadot: {
    spec: {
        astar: {
            rpc: Record<string, Record<string, any>>;
            instances: {
                council: string[];
            };
            types: {
                minmax: [number | null | undefined, number | null | undefined] | [(number | undefined)?, (number | undefined)?] | (number | null | undefined)[];
                types: {
                    Address: string;
                    LookupSource: string;
                    PalletsOrigin: {
                        _enum: {
                            System: string;
                            Timestamp: string;
                            RandomnessCollectiveFlip: string;
                            Balances: string;
                            Utility: string;
                            Indices: string;
                            Authorship: string;
                            Aura: string;
                            Grandpa: string;
                            Staking: string;
                            Session: string;
                            Historical: string;
                            Sudo: string;
                            TransactionPayment: string;
                        };
                    };
                };
            }[];
            alias: Record<string, any>;
        };
        shiden: {
            rpc: Record<string, Record<string, any>>;
            instances: {
                council: string[];
            };
            types: {
                minmax: [number | null | undefined, number | null | undefined] | [(number | undefined)?, (number | undefined)?] | (number | null | undefined)[];
                types: {
                    Address: string;
                    LookupSource: string;
                    PalletsOrigin: {
                        _enum: {
                            System: string;
                            Timestamp: string;
                            RandomnessCollectiveFlip: string;
                            Balances: string;
                            Utility: string;
                            Indices: string;
                            Authorship: string;
                            Aura: string;
                            Grandpa: string;
                            Staking: string;
                            Session: string;
                            Historical: string;
                            Sudo: string;
                            TransactionPayment: string;
                        };
                    };
                };
            }[];
            alias: Record<string, any>;
        };
        shibuya: {
            rpc: Record<string, Record<string, any>>;
            instances: {
                council: string[];
            };
            types: {
                minmax: [number | null | undefined, number | null | undefined] | [(number | undefined)?, (number | undefined)?] | (number | null | undefined)[];
                types: {
                    Address: string;
                    LookupSource: string;
                    PalletsOrigin: {
                        _enum: {
                            System: string;
                            Timestamp: string;
                            RandomnessCollectiveFlip: string;
                            Balances: string;
                            Utility: string;
                            Indices: string;
                            Authorship: string;
                            Aura: string;
                            Grandpa: string;
                            Staking: string;
                            Session: string;
                            Historical: string;
                            Sudo: string;
                            TransactionPayment: string;
                        };
                    };
                };
            }[];
            alias: Record<string, any>;
        };
    };
};
