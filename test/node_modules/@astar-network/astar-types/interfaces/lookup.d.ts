declare const _default: {
    /**
     * Lookup11: pallet_System::pallet::Call
     **/
    PalletSystemCall: {
        _enum: {
            fill_block: {
                ratio: string;
            };
            remark: {
                remark: string;
            };
            set_heap_pages: {
                pages: string;
            };
            set_code: {
                code: string;
            };
            set_code_without_checks: {
                code: string;
            };
            set_changes_trie_config: {
                changesTrieConfig: string;
            };
            set_storage: {
                items: string;
            };
            kill_storage: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
            kill_prefix: {
                prefix: string;
                subkeys: string;
            };
            remark_with_event: {
                remark: string;
            };
        };
    };
    /**
     * Lookup17: pallet_System::pallet::Error
     **/
    PalletSystemError: {
        _enum: string[];
    };
    /**
     * Lookup22: pallet_System::pallet::Event
     **/
    PalletSystemEvent: {
        _enum: {
            ExtrinsicSuccess: string;
            ExtrinsicFailed: string;
            CodeUpdated: string;
            NewAccount: string;
            KilledAccount: string;
            Remarked: string;
        };
    };
    /**
     * Lookup34: pallet_Utility::pallet::Call
     **/
    PalletUtilityCall: {
        _enum: {
            batch: {
                calls: string;
            };
            as_derivative: {
                index: string;
                call: string;
            };
            batch_all: {
                calls: string;
            };
        };
    };
    /**
     * Lookup35: pallet_Utility::pallet::Error
     **/
    PalletUtilityError: {
        _enum: string[];
    };
    /**
     * Lookup36: pallet_Utility::pallet::Event
     **/
    PalletUtilityEvent: {
        _enum: {
            BatchInterrupted: string;
            BatchCompleted: string;
            ItemCompleted: string;
        };
    };
    /**
     * Lookup46: pallet_Identity::pallet::Call
     **/
    PalletIdentityCall: {
        _enum: {
            add_registrar: {
                account: string;
            };
            set_identity: {
                info: string;
            };
            set_subs: {
                subs: string;
            };
            clear_identity: string;
            request_judgement: {
                regIndex: string;
                maxFee: string;
            };
            cancel_request: {
                regIndex: string;
            };
            set_fee: {
                index: string;
                fee: string;
            };
            set_account_id: {
                _alias: {
                    new_: string;
                };
                index: string;
                new_: string;
            };
            set_fields: {
                index: string;
                fields: string;
            };
            provide_judgement: {
                regIndex: string;
                target: string;
                judgement: string;
            };
            kill_identity: {
                target: string;
            };
            add_sub: {
                sub: string;
                data: string;
            };
            rename_sub: {
                sub: string;
                data: string;
            };
            remove_sub: {
                sub: string;
            };
            quit_sub: string;
        };
    };
    /**
     * Lookup48: pallet_Identity::pallet::Error
     **/
    PalletIdentityError: {
        _enum: string[];
    };
    /**
     * Lookup50: pallet_Identity::pallet::Event
     **/
    PalletIdentityEvent: {
        _enum: {
            IdentitySet: string;
            IdentityCleared: string;
            IdentityKilled: string;
            JudgementRequested: string;
            JudgementUnrequested: string;
            JudgementGiven: string;
            RegistrarAdded: string;
            SubIdentityAdded: string;
            SubIdentityRemoved: string;
            SubIdentityRevoked: string;
        };
    };
    /**
     * Lookup56: pallet_Timestamp::pallet::Call
     **/
    PalletTimestampCall: {
        _enum: {
            set: {
                now: string;
            };
        };
    };
    /**
     * Lookup64: pallet_Multisig::pallet::Call
     **/
    PalletMultisigCall: {
        _enum: {
            as_multi_threshold_1: {
                otherSignatories: string;
                call: string;
            };
            as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                call: string;
                storeCall: string;
                maxWeight: string;
            };
            approve_as_multi: {
                threshold: string;
                otherSignatories: string;
                maybeTimepoint: string;
                callHash: string;
                maxWeight: string;
            };
            cancel_as_multi: {
                threshold: string;
                otherSignatories: string;
                timepoint: string;
                callHash: string;
            };
        };
    };
    /**
     * Lookup65: pallet_Multisig::pallet::Error
     **/
    PalletMultisigError: {
        _enum: string[];
    };
    /**
     * Lookup68: pallet_Multisig::pallet::Event
     **/
    PalletMultisigEvent: {
        _enum: {
            NewMultisig: string;
            MultisigApproval: string;
            MultisigExecuted: string;
            MultisigCancelled: string;
        };
    };
    /**
     * Lookup72: pallet_EthCall::pallet::Call
     **/
    PalletEthCallCall: {
        _enum: {
            call: {
                call: string;
                account: string;
                signature: string;
            };
        };
    };
    /**
     * Lookup73: pallet_EthCall::pallet::Error
     **/
    PalletEthCallError: {
        _enum: string[];
    };
    /**
     * Lookup74: pallet_EthCall::pallet::Event
     **/
    PalletEthCallEvent: {
        _enum: {
            Executed: string;
        };
    };
    /**
     * Lookup78: pallet_ParachainSystem::pallet::Call
     **/
    PalletParachainSystemCall: {
        _enum: {
            set_upgrade_block: {
                relayChainBlock: string;
            };
            set_validation_data: {
                data: string;
            };
            sudo_send_upward_message: {
                message: string;
            };
            authorize_upgrade: {
                codeHash: string;
            };
            enact_authorized_upgrade: {
                code: string;
            };
        };
    };
    /**
     * Lookup79: pallet_ParachainSystem::pallet::Error
     **/
    PalletParachainSystemError: {
        _enum: string[];
    };
    /**
     * Lookup80: pallet_ParachainSystem::pallet::Event
     **/
    PalletParachainSystemEvent: {
        _enum: {
            ValidationFunctionStored: string;
            ValidationFunctionApplied: string;
            UpgradeAuthorized: string;
            DownwardMessagesReceived: string;
            DownwardMessagesProcessed: string;
        };
    };
    /**
     * Lookup93: pallet_Balances::pallet::Call
     **/
    PalletBalancesCall: {
        _enum: {
            transfer: {
                dest: string;
                value: string;
            };
            set_balance: {
                who: string;
                newFree: string;
                newReserved: string;
            };
            force_transfer: {
                source: string;
                dest: string;
                value: string;
            };
            transfer_keep_alive: {
                dest: string;
                value: string;
            };
            transfer_all: {
                dest: string;
                keepAlive: string;
            };
        };
    };
    /**
     * Lookup94: pallet_Balances::pallet::Error
     **/
    PalletBalancesError: {
        _enum: string[];
    };
    /**
     * Lookup96: pallet_Balances::pallet::Event
     **/
    PalletBalancesEvent: {
        _enum: {
            Endowed: string;
            DustLost: string;
            Transfer: string;
            BalanceSet: string;
            Deposit: string;
            Reserved: string;
            Unreserved: string;
            ReserveRepatriated: string;
        };
    };
    /**
     * Lookup101: pallet_Vesting::pallet::Call
     **/
    PalletVestingCall: {
        _enum: {
            vest: string;
            vest_other: {
                target: string;
            };
            vested_transfer: {
                target: string;
                schedule: string;
            };
            force_vested_transfer: {
                source: string;
                target: string;
                schedule: string;
            };
        };
    };
    /**
     * Lookup102: pallet_Vesting::pallet::Error
     **/
    PalletVestingError: {
        _enum: string[];
    };
    /**
     * Lookup103: pallet_Vesting::pallet::Event
     **/
    PalletVestingEvent: {
        _enum: {
            VestingUpdated: string;
            VestingCompleted: string;
        };
    };
    /**
     * Lookup105: pallet_Authorship::pallet::Call
     **/
    PalletAuthorshipCall: {
        _enum: {
            set_uncles: {
                newUncles: string;
            };
        };
    };
    /**
     * Lookup106: pallet_Authorship::pallet::Error
     **/
    PalletAuthorshipError: {
        _enum: string[];
    };
    /**
     * Lookup108: pallet_CollatorSelection::pallet::Call
     **/
    PalletCollatorSelectionCall: {
        _enum: {
            set_invulnerables: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            set_desired_candidates: {
                max: string;
            };
            set_candidacy_bond: {
                bond: string;
            };
            register_as_candidate: string;
            leave_intent: string;
        };
    };
    /**
     * Lookup109: pallet_CollatorSelection::pallet::Error
     **/
    PalletCollatorSelectionError: {
        _enum: string[];
    };
    /**
     * Lookup110: pallet_CollatorSelection::pallet::Event
     **/
    PalletCollatorSelectionEvent: {
        _enum: {
            NewInvulnerables: string;
            NewDesiredCandidates: string;
            NewCandidacyBond: string;
            CandidateAdded: string;
            CandidateRemoved: string;
        };
    };
    /**
     * Lookup113: pallet_Session::pallet::Call
     **/
    PalletSessionCall: {
        _enum: {
            set_keys: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
                proof: string;
            };
            purge_keys: string;
        };
    };
    /**
     * Lookup114: pallet_Session::pallet::Error
     **/
    PalletSessionError: {
        _enum: string[];
    };
    /**
     * Lookup116: pallet_Session::pallet::Event
     **/
    PalletSessionEvent: {
        _enum: {
            NewSession: string;
        };
    };
    /**
     * Lookup124: pallet_CumulusXcm::pallet::Call
     **/
    PalletCumulusXcmCall: string;
    /**
     * Lookup127: pallet_CumulusXcm::pallet::Event
     **/
    PalletCumulusXcmEvent: {
        _enum: {
            InvalidFormat: string;
            UnsupportedVersion: string;
            ExecutedDownward: string;
        };
    };
    /**
     * Lookup128: pallet_Sudo::pallet::Call
     **/
    PalletSudoCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            set_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /**
     * Lookup129: pallet_Sudo::pallet::Error
     **/
    PalletSudoError: {
        _enum: string[];
    };
    /**
     * Lookup130: pallet_Sudo::pallet::Event
     **/
    PalletSudoEvent: {
        _enum: {
            Sudid: string;
            KeyChanged: string;
            SudoAsDone: string;
        };
    };
};
export default _default;
