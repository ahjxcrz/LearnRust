Rust programming language is fundamentally about empowerment! It seems Rust is not just like C for the Operating system level! 

introducing parallelism in Rust is a relatively low-risk operation: the compiler will catch the classical mistakes for you

I like that in Rust, the compiler would catch all bugs for you, so you cannot compile, like the concurrency bugs

Cargo is dependency manager and build tool!

I didn't know Rust is also used in Bioinformatics!

Speed and Stability - Rust!

Installed Rust: curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh 
To configure your current shell, run:
source "$HOME/.cargo/env"

println!("Hello, world!");
It is a little bit similar to Java's println, I actually prefer print, and the ";" is similar to C

cargo new to create a new project
cargo build to build the project
cargo check to check if your project can compile
cargo run to run the project

cargo build --release to build and release the project

a crate is a collection of Rust source code files

There is a Cargo.lock file, it is used to keep the version of all dependencies, so you can always run the code without any issue, if you want to upgrade, use: cargo update

We can just simply use loop for the loop in Rust! 
parse method is used to convert the data type, like let guess: u32 = guess.trim().parse().expect("Please type a number!");  we will get u32 integer 

I feel Ownership is new and unique for Rust 
Each value in Rust has an owner.
There can only be one owner at a time.
When the owner goes out of scope, the value will be dropped.


The struct reminds me the C language, haha

Finished the first 5 chapters, maybe good enough for now, I will come back later on. 

Now I will check:  
https://docs.astar.network/docs/builder-guides/from-zero-to-ink-hero/


enum and struct might need sometime to digest, the following concept might be useful:
Packages: A Cargo feature that lets you build, test, and share crates
Crates: A tree of modules that produces a library or executable
Modules and use: Let you control the organization, scope, and privacy of paths
Paths: A way of naming an item, such as a struct, function, or module

chapter 7 about packages, crates and modules are quite useful! 

